{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"model",
				"model_position"
			],
			[
				"fra",
				"frameNumber"
			],
			[
				"set",
				"setFrame"
			],
			[
				"join",
				"joint_name"
			],
			[
				"z",
				"z_rotation"
			],
			[
				"x",
				"x_rotation"
			],
			[
				"model_",
				"model_eulerAngles"
			],
			[
				"joi",
				"jointAcceleration"
			],
			[
				"get",
				"getJointSpeed"
			],
			[
				"ro",
				"rotation"
			],
			[
				"x_t",
				"x_position"
			],
			[
				"tr",
				"translationMatrix"
			],
			[
				"x_",
				"x_rotation"
			],
			[
				"lo",
				"local_position"
			],
			[
				"mode",
				"model"
			],
			[
				"_",
				"_root"
			],
			[
				"se",
				"setNodeByName"
			],
			[
				"chi",
				"children"
			],
			[
				"node",
				"nodeByName"
			],
			[
				"tra",
				"transformation"
			],
			[
				"rot",
				"rotationAxis_x"
			],
			[
				"curre",
				"current_node"
			],
			[
				"ave",
				"averageStrideLength"
			],
			[
				"step",
				"stepFrames"
			],
			[
				"stride",
				"strideLengthSum"
			],
			[
				"str",
				"strideLength"
			],
			[
				"la",
				"lastStepPosition"
			],
			[
				"ste",
				"stepFrames"
			],
			[
				"st",
				"startStep"
			],
			[
				"frame",
				"frames"
			],
			[
				"min",
				"min_height"
			],
			[
				"ch",
				"child"
			],
			[
				"root",
				"root"
			],
			[
				"joint",
				"joint_name"
			],
			[
				"fr",
				"frame_index"
			],
			[
				"pa",
				"parent_transformation"
			],
			[
				"cu",
				"current_node"
			],
			[
				"cha",
				"channel_position"
			],
			[
				"j",
				"jointSpeed"
			],
			[
				"pr",
				"previous_position"
			],
			[
				"mo",
				"model_position"
			],
			[
				"ca",
				"calculateFrame"
			],
			[
				"y",
				"y_rotation"
			],
			[
				"matr",
				"matrix"
			],
			[
				"cal",
				"calculateNodePosition"
			],
			[
				"chann",
				"channel"
			],
			[
				"c",
				"channels"
			],
			[
				"jo",
				"joint_position"
			],
			[
				"r",
				"rotationAxis_z"
			],
			[
				"R",
				"rotationAxis_y"
			],
			[
				"RO",
				"rotationAxis_x"
			],
			[
				"angle",
				"angle_x"
			],
			[
				"num",
				"numberOfFrames"
			],
			[
				"__",
				"__init__"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "\"\"\" Este modulo consistira de funciones referentes al movimiento \n    de un modelo jerarquico en 3D ( marioneta ) y su estudio \"\"\"\n\nimport model\nimport math\nimport matplotlib.pyplot as plt\nimport itertools\nimport numpy as np\n\n### 3D plot \nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\n\n\ndef getJointPosition( model , joint_name ):\n    \"\"\" Calculates the position of the given joint in every frame.\"\"\"\n    jointPosition = []\n\n    ### Calculate every frame\n    for frame_index in range( model.numberOfFrames ):\n        model.setFrame( frame_index )\n        jointPosition.append( model.model_position[ joint_name ] )\n\n    return jointPosition\n\ndef getJointAngle( model , joint_name ):\n    \"\"\" Returns a list with the rotation in euler angles of the given joint. \"\"\"\n    jointAngle = []\n\n    ### Calculate every frame\n    for frame_index in range( model.numberOfFrames ):\n        model.setFrame( frame_index )\n        jointAngle.append( model.model_eulerAngles[ joint_name ] )\n\n    return jointAngle\ndef getJointSpeed( model , joint_name ):\n        \"\"\" Calculates the average speed of the joint between each succesive frames. \"\"\"\n        jointSpeed = []\n\n        ### Initialize model to the position in the first frame\n        model.setFrame( 0 )  \n        current_position = model.model_position[ joint_name ]  \n\n        ### Calculate average speed of succesive joint positions\n        for frame_index in range( 1 , model.numberOfFrames ):\n            model.setFrame( frame_index )\n            previous_position = current_position\n            current_position = model.model_position[ joint_name ]\n            \n            jointSpeed.append( np.linalg.norm( current_position - previous_position ) / model.frameTime )\n\n        return jointSpeed\n\ndef getJointAcceleration( model , joint_name ):\n    \"\"\" Calculates the acceleration of the joint between each succesive frames. \"\"\"\n    jointAcceleration = []\n\n    jointSpeed = getJointSpeed( model , joint_name )\n\n    ### Calculate average accelearation from succesive joint speed\n    for index in range( 1 , len( jointSpeed ) ):\n\n        jointAcceleration.append( ( jointSpeed[ i ] - jointSpeed[ -1 ] ) / model.frameTime  )\n\n    return jointAcceleration\n\ndef plotJointPositionCoordinate( model , joint_name , coordinate ):\n    \n    \"\"\" Plot the given coordinate of the joint as a function of the frames\"\"\"\n\n    ### Check if argument joint_name is a string , convert to string\n    if( type(joint_name) is str ):\n        joint_name = [ joint_name ]\n\n    ### Set color cycle for the plots\n    colors = itertools.cycle(['r', 'g', 'b', 'y'])\n\n    for joint in joint_name:\n\n        ### Get corrdinates of a joint\n        jointPositionList = getJointPosition( model , joint )\n\n        ### Generate coordinate value array\n        plotCoordinate = [ position[ coordinate,0 ] for position in jointPositionList ]\n        axis = [ x for x in range( 0 , model.numberOfFrames ) ]\n\n        ### Plot the given coordinate\n        plt.plot( axis , plotCoordinate , 'ro' , color = next(colors) )\n    \n    ### Show plot\n    plt.show()\n\ndef plotJointAngleCoordinate( model , joint_name , coordinate ):\n    \n    \"\"\" Plot the given coordinate of the joint as a function of the frames\"\"\"\n\n    ### Check if argument joint_name is a string , convert to string\n    if( type(joint_name) is str ):\n        joint_name = [ joint_name ]\n\n    ### Set color cycle for the plots\n    colors = itertools.cycle(['r', 'g', 'b', 'y'])\n\n    for joint in joint_name:\n\n        ### Get corrdinates of a joint\n        jointAngleList = getJointAngle( model , joint )\n\n        ### Generate coordinate value array\n        plotCoordinate = [ angle[ coordinate ] for angle in jointAngleList ]\n        axis = [ x for x in range( 0 , model.numberOfFrames ) ]\n\n        ### Plot the given coordinate\n        plt.plot( axis , plotCoordinate , 'ro' , color = next(colors) )\n    \n    ### Show plot\n    plt.show()\n\ndef jointLowestFrames( model , joint_name , error ):\n    \"\"\" Find the frames where the given joint is in its lowest position. Given that the Y axis \n        is the vertical axis \"\"\"\n    joint_position = getJointPosition( model , joint_name )\n\n    joint_height = [ coordinate[ 1,0 ] for coordinate in joint_position ]\n\n    min_height = min( joint_height )\n\n    frames = []\n\n    for index in range( 0 , len( joint_height ) ):\n\n        if( abs( joint_height[ index ] - min_height ) < error ):\n\n            frames.append( index )\n\n    return frames\n\ndef plotJointLocalWorkspace( model , joint_name ):\n    \"\"\" 3D plot of the angles of a joint in the unit sphere \"\"\"\n\n    joint = model.getJointByName( joint_name )\n\n    x ,  y , z = [] , [] , []\n\n    ### Calculate every frame\n    for frame_index in range( model.numberOfFrames ):\n        model.setFrame( frame_index )\n        \n        local_position = np.matrix( joint.transformation ) * np.matrix( [ [0] ,[0] ,[0] ,[1] ] )\n\n        x.append( local_position[ 0,0 ] )\n        y.append( local_position[ 1,0 ] )\n        z.append( local_position[ 2,0 ] )\n\n    ### 3D plot the positions\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n\n    ax.scatter(x, y, z, c='r', marker='o')\n\n    ax.set_xlabel('X Label')\n    ax.set_ylabel('Y Label')\n    ax.set_zlabel('Z Label')\n\n    plt.show()\n\ndef plotFrame( model , frameNumber ):\n    \"\"\" Plots a frame of the model \"\"\"\n\n    ## Set frame\n    model.setFrame( frameNumber )\n\n    ## Get every joint coordinates in the frame\n    x = [ model.model_position[ key ][ 0 , 0 ] for key in model.model_position ] \n    y = [ model.model_position[ key ][ 1 , 0 ] for key in model.model_position ]\n    z = [ model.model_position[ key ][ 2 , 0 ] for key in model.model_position ]\n\n    ## \n\n    ## Plot model\n    fig = plt.figure( figsize=plt.figaspect( 1 ) )\n    ax = fig.add_subplot( 111 , projection='3d' )\n    ax.set_aspect('equal')\n\n    ax.scatter( x , y , z )\n\n    ax.set_xlabel('X Label')\n    ax.set_ylabel('Y Label')\n    ax.set_zlabel('Z Label')\n\n    ## Set bounding box for the plot\n    max_range = max( [ max( x ) - min( x ), max( y ) - min( y ) , max( z ) - min( z ) ] ) / 2.0\n\n    mean_x = np.mean( x )\n    mean_y = np.mean( y )\n    mean_z = np.mean( z )\n    \n    ax.set_xlim( mean_x - max_range, mean_x + max_range )\n    ax.set_ylim( mean_y - max_range, mean_y + max_range )\n    ax.set_zlim( mean_z - max_range, mean_z + max_range )\n    \n    plt.show()",
			"file": "movement.py",
			"file_size": 6571,
			"file_write_time": 1437606800000000,
			"settings":
			{
				"buffer_size": 6377,
				"line_ending": "Windows",
				"name": "\"\"\" Este modulo consistira de funciones referentes"
			}
		},
		{
			"contents": "### Session \n\nimport model as m\nmodelo =  m.Model( \"sample-mocap-data//05//05_01_ignoreFirstFrame.bvh\" )\nmodelo.read()\n\nimport bipedal as bip\nbip.strideLength( modelo , \"LeftFoot\" ,  \"LeftToeBase\" , \"LeftToeBase_EndSite\" )\n\nimport movement as mov\nmov.jointLowestFrames( modelo , \"LeftFoot\" , .5 )\n\nmov.plotJointCoordinate( modelo , [ \"LeftFoot\" , \"LeftToeBase\" , \"LeftToeBase_EndSite\" ] , 1 ) \n\n\n\nimport movement as mov\nmov.plotJointLocalWorkspace( modelo , \"LeftLeg\" )\n\n\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\n\nimport model as m\nmodelo =  m.Model( \"sample-mocap-data//02//02_01.bvh\" )\nmodelo.read()\n\nmodelo.setFrame( 0 )\n\nx , y , z = [] , [] , []\n\nfor key in modelo.model_position:\n    x.append( modelo.model_position[ key ][0,0] )\n    y.append( modelo.model_position[ key ][1,0] )\n    z.append( modelo.model_position[ key ][2,0] )\n\n### 3D plot the positions\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nax.scatter(x, y, z, c='r', marker='o')\n\nax.set_xlabel('X Label')\nax.set_ylabel('Y Label')\nax.set_zlabel('Z Label')\n\nplt.show()\n\nimport model as m\nmodelo =  m.Model( \"sample-mocap-data//02//02_01.bvh\" )\nmodelo.read()\n\nimport movement as mov\n\nmov.plotJointCoordinate( modelo , [ \"LeftFoot\" , \"LeftToeBase\" , \"LeftToeBase_EndSite\" ] , 1 ) \n\n\n\nmodelo.nodeByName[ \"LeftFoot\" ].transformation\nmatrix([[ 0.99581309, -0.00879288, -0.09098889,  2.54213571],\n        [ 0.02857308,  0.97542952,  0.218451  , -6.60823429],\n        [ 0.08683244, -0.2201362 ,  0.97159672,  1.72384433],\n        [ 0.        ,  0.        ,  0.        ,  1.        ]])\n\n>>> modelo.model_position[ \"LeftFoot\"]\nmatrix([[ 11.50833125],\n        [  0.66841475],\n        [-24.43282884],\n        [  1.        ]])\n\nmatrix([[  9.88437833e-01,  -4.09552827e-03,   1.51571357e-01,\n           2.49158787e+00],\n        [ -3.81554446e-02,   9.60749232e-01,   2.74781868e-01,\n          -6.67401962e+00],\n        [ -1.46747442e-01,  -2.77388066e-01,   9.49484623e-01,\n           1.53372281e+00],\n        [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n           1.00000000e+00]])\n\nmatrix([[  9.88437833e-01,  -4.09552827e-03,   1.51571357e-01,\n           2.49158787e+00],\n        [ -3.81554446e-02,   9.60749232e-01,   2.74781868e-01,\n          -6.67401962e+00],\n        [ -1.46747442e-01,  -2.77388066e-01,   9.49484623e-01,\n           1.53372281e+00],\n        [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n           1.00000000e+00]])\n\n>> modelo.nodeByName[ \"Hips\" ].transformation\nmatrix([[  0.9833953 ,   0.04601624,  -0.17554542,  10.4037    ],\n        [ -0.03831598,   0.99815944,   0.04700655,  16.6749    ],\n        [  0.17738539,  -0.03949982,   0.98334846, -29.7319    ],\n        [  0.        ,   0.        ,   0.        ,   1.        ]])\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport model as m\nimport movement as mov\n\nmodelo =  m.Model( \"sample-mocap-data//05//05_01_ignoreFirstFrame.bvh\" )\nmodelo.read()\n\npos = mov.getJointPosition( modelo , \"LeftFoot\" )\n\ny = [ key[1,0] for key in pos ]\nx = [ x for x in range( 0 , modelo.numberOfFrames ) ]\n\n\n# calculate polynomial\nz = np.polyfit(x, y, 50)\nf = np.poly1d(z)\n\n# calculate new x's and y's\nx_new = np.linspace(x[0], x[-1], 100)\ny_new = f(x_new)\n\nplt.plot(x,y,'o', x_new, y_new)\nplt.xlim([x[0]-1, x[-1] + 1 ])\nplt.show()\n\n\n\n\nVecStart_x = [0,1,3,5]\nVecStart_y = [2,2,5,5]\nVecStart_z = [0,1,1,5]\nVecEnd_x = [1,2,-1,6]\nVecEnd_y = [3,1,-2,7]\nVecEnd_z  =[1,0,4,9]\n\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\nfor i in range(4):\n    ax.plot([VecStart_x[i], VecEnd_x[i]], [VecStart_y[i],VecEnd_y[i]],zs=[VecStart_z[i],VecEnd_z[i]])\n\nplt.show()\nAxes3D.plot()\n\n",
			"settings":
			{
				"buffer_size": 3742,
				"line_ending": "Unix",
				"name": "### Session"
			}
		},
		{
			"file": "model.py",
			"settings":
			{
				"buffer_size": 5111,
				"line_ending": "Windows"
			}
		},
		{
			"file": "bvh.py",
			"settings":
			{
				"buffer_size": 9822,
				"line_ending": "Unix"
			}
		},
		{
			"file": "geometry.py",
			"settings":
			{
				"buffer_size": 4139,
				"line_ending": "Windows",
				"name": "\"\"\" This file contains functions for 3D geometry \""
			}
		},
		{
			"file": "bipedal.py",
			"settings":
			{
				"buffer_size": 2689,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"command_palette":
	{
		"height": 219.0,
		"selected_items":
		[
			[
				"Package Control: re",
				"Package Control: Remove Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 501.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/sample-mocap-data/02/02_01.bvh",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/bvhplay/skeleton.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/sample-mocap-data/Example1.bvh",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/bvh.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/sample-mocap-data/49/49_01_ignoreFirstFrame.bvh",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/sample-mocap-data/05/05_01__ignoreFirstFrame.bvh",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/sample-mocap-data/02/02_01_ignoreFirstFrame.bvh",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/sample-mocap-data/02/02_01.bvh",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/asfamc.py",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/bvh.py",
		"/C/Users/Test/Downloads/bvhplay-1.00-sourcecode/bvhplay.py",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/bvhplay/__init__.py",
		"/C/Users/Test/Downloads/bvhplay-1.00-sourcecode/README",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/test.py",
		"/C/Users/Test/AppData/Roaming/Sublime Text 3/Packages/Anaconda/README.md",
		"/C/Users/Test/Downloads/02.asf",
		"/C/Users/Test/Downloads/cgkit-2.0.0.win32-py3.3/PLATLIB/cgkit/bvh.py",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/sample-mocap-data/Example1.bvh",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/scatterPlot.py",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/sample-mocap-data/Male1_B3_Walk.bvh",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/data.py",
		"/C/Users/Test/Downloads/500 Days Of Summer.2009.720p.BDRip.x264-VLiS/geometry.h",
		"/C/Python33/Lib/site-packages/cgkit/bvh.py",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/sample-mocap-data/Example1.bvh.txt",
		"/C/Users/Test/Downloads/cgkit-2.0.0-py3k/cgkit-2.0.0/README.txt"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"channel",
			"x",
			"children",
			"calculateNodePosition",
			"end site",
			"calculateFrame",
			"self",
			"channel_position",
			"self.channels",
			"numch"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "movement.py",
					"settings":
					{
						"buffer_size": 6377,
						"regions":
						{
						},
						"selection":
						[
							[
								5074,
								5074
							]
						],
						"settings":
						{
							"auto_name": "\"\"\" Este modulo consistira de funciones referentes",
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2325.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"settings":
					{
						"buffer_size": 3742,
						"regions":
						{
						},
						"selection":
						[
							[
								1084,
								1084
							]
						],
						"settings":
						{
							"auto_name": "### Session",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 555.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "model.py",
					"settings":
					{
						"buffer_size": 5111,
						"regions":
						{
						},
						"selection":
						[
							[
								4349,
								4349
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1094.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "bvh.py",
					"settings":
					{
						"buffer_size": 9822,
						"regions":
						{
						},
						"selection":
						[
							[
								2418,
								2418
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 528.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "geometry.py",
					"settings":
					{
						"buffer_size": 4139,
						"regions":
						{
						},
						"selection":
						[
							[
								1342,
								1342
							]
						],
						"settings":
						{
							"auto_name": "\"\"\" This file contains functions for 3D geometry \"",
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 60.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "bipedal.py",
					"settings":
					{
						"buffer_size": 2689,
						"regions":
						{
						},
						"selection":
						[
							[
								69,
								69
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 201.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/C/Users/Test/Documents/Programming/Data Structures/data-structures.py"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 151.0,
	"status_bar_visible": true
}
