{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"max",
				"maxFreq"
			],
			[
				"maxim",
				"maximaIndex"
			],
			[
				"l",
				"linspace"
			],
			[
				"mode",
				"model_edges"
			],
			[
				"model",
				"model_edges"
			],
			[
				"child",
				"child"
			],
			[
				"mod",
				"model_edges"
			],
			[
				"par",
				"parent_transformation"
			],
			[
				"trans",
				"translation"
			],
			[
				"s",
				"show_label"
			],
			[
				"frame",
				"frameNumber"
			],
			[
				"ax",
				"axAcceleration"
			],
			[
				"get",
				"getJointSpeed"
			],
			[
				"min",
				"minY"
			],
			[
				"joi",
				"joint"
			],
			[
				"loca",
				"local_position"
			],
			[
				"frm",
				"frameTime"
			],
			[
				"ma",
				"maximaIndex"
			],
			[
				"aut",
				"autoCorrelation"
			],
			[
				"fra",
				"frameNumber"
			],
			[
				"set",
				"setFrame"
			],
			[
				"join",
				"joint_name"
			],
			[
				"z",
				"z_rotation"
			],
			[
				"x",
				"x_rotation"
			],
			[
				"model_",
				"model_eulerAngles"
			],
			[
				"ro",
				"rotation"
			],
			[
				"x_t",
				"x_position"
			],
			[
				"tr",
				"translationMatrix"
			],
			[
				"x_",
				"x_rotation"
			],
			[
				"lo",
				"local_position"
			],
			[
				"_",
				"_root"
			],
			[
				"se",
				"setNodeByName"
			],
			[
				"chi",
				"children"
			],
			[
				"node",
				"nodeByName"
			],
			[
				"tra",
				"transformation"
			],
			[
				"rot",
				"rotationAxis_x"
			],
			[
				"curre",
				"current_node"
			],
			[
				"ave",
				"averageStrideLength"
			],
			[
				"step",
				"stepFrames"
			],
			[
				"stride",
				"strideLengthSum"
			],
			[
				"str",
				"strideLength"
			],
			[
				"la",
				"lastStepPosition"
			],
			[
				"ste",
				"stepFrames"
			],
			[
				"st",
				"startStep"
			],
			[
				"ch",
				"child"
			],
			[
				"root",
				"root"
			],
			[
				"joint",
				"joint_name"
			],
			[
				"fr",
				"frame_index"
			],
			[
				"pa",
				"parent_transformation"
			],
			[
				"cu",
				"current_node"
			],
			[
				"cha",
				"channel_position"
			],
			[
				"j",
				"jointSpeed"
			],
			[
				"pr",
				"previous_position"
			],
			[
				"mo",
				"model_position"
			],
			[
				"ca",
				"calculateFrame"
			],
			[
				"y",
				"y_rotation"
			],
			[
				"matr",
				"matrix"
			],
			[
				"cal",
				"calculateNodePosition"
			],
			[
				"chann",
				"channel"
			],
			[
				"c",
				"channels"
			],
			[
				"jo",
				"joint_position"
			],
			[
				"r",
				"rotationAxis_z"
			],
			[
				"R",
				"rotationAxis_y"
			],
			[
				"RO",
				"rotationAxis_x"
			],
			[
				"angle",
				"angle_x"
			],
			[
				"num",
				"numberOfFrames"
			],
			[
				"__",
				"__init__"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "# -*- coding: utf-8 -*-\n\n\"\"\" Este modulo consistira de funciones referentes al estudio del movimiento \n    de un modelo jerarquico en 3D ( marioneta ). Específicamente al movimiento\n    de bipedos ó bipedestración y sus movimientos de locomoción. \"\"\"\n\nimport model\nimport movement\nimport numpy as np\n\n\ndef footOnFloorFrames( model , heel_joint ,  toeBase_joint , end_joint ):\n    \"\"\" This function returns a list of the frames where the foot is on the ground.\"\"\"\n    \"\"\" Parameters : \n            model : An instance of the class model.Model .\n            heel_joint : A string with the name of the joint that resembles the 'Heel' of a chosen foot .\n            oeBase_joint : A string with the name of the joint that resembles the 'Toe Base' of a chosen foot .\n            end_joint : A string with the name of the joint that resembles the 'End' of a chosen foot .\n    \"\"\"\n\n\n    frames = movement.jointLowestFrames( model , heel_joint , 1.1 )\n\n    return frames\n\ndef strideLength( model , heel_joint ,  toeBase_joint , end_joint ):\n    \"\"\" This function returns the average stride length of the walk animation of the model\"\"\"\n    \"\"\" Parameters : \n            model : An instance of the class model.Model .\n            heel_joint : A string with the name of the joint that resembles the 'Heel' of a chosen foot .\n            oeBase_joint : A string with the name of the joint that resembles the 'Toe Base' of a chosen foot .\n            end_joint : A string with the name of the joint that resembles the 'End' of a chosen foot .\n    \"\"\"\n\n    frames = footOnFloorFrames( model , heel_joint ,  toeBase_joint , end_joint )\n\n    ### Check if frames size is larger than 1\n    if( len( frames ) <= 1  ):\n        return False\n\n    ### Find the frames in the middle of a step ( foot on the floor )\n    \n    stepFrames = []\n\n    startStep = frames[ 0 ]\n\n    for index in range( 1 , len( frames ) ):\n\n        if( abs( frames[ index ] - frames[ index - 1 ] ) > 1 ):\n            \n            endStep = frames[ index - 1 ]\n\n            stepFrames.append( int( ( endStep + startStep ) / 2 ) )\n\n            startStep = frames[ index ]\n\n\n    ### Calculate the distance between the consecutive steps\n    strideLengthSum = 0 \n\n    heel_position = movement.getJointPosition( model , heel_joint )\n\n    lastStepPosition = None\n\n    for frameIndex in stepFrames:\n\n        currentStepPosition = heel_position[ frameIndex ]\n\n        if( lastStepPosition is None ):\n\n            lastStepPosition = currentStepPosition \n\n        else:\n\n            strideLengthSum += np.linalg.norm( currentStepPosition - lastStepPosition )\n\n    averageStrideLength = strideLengthSum / ( len( stepFrames ) - 1 )\n\n    return averageStrideLength\n\n\n\n\n\n\n\n\n\n    \n\n\n",
			"file": "bipedal.py",
			"file_size": 2809,
			"file_write_time": 1438205183000000,
			"settings":
			{
				"buffer_size": 2718,
				"line_ending": "Windows"
			}
		},
		{
			"file": "data.py",
			"settings":
			{
				"buffer_size": 2948,
				"line_ending": "Unix"
			}
		},
		{
			"file": "bvh.py",
			"settings":
			{
				"buffer_size": 9822,
				"line_ending": "Unix"
			}
		},
		{
			"file": "model.py",
			"settings":
			{
				"buffer_size": 6012,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\n\n\"\"\" This file contains functions for visualization of the motion capture data. \"\"\"\n\nimport numpy as np\nimport mayavi.mlab as mlab\n\nfrom traits.api import HasTraits, Instance, Range, on_trait_change\nfrom traitsui.api import View, Item, HGroup\nfrom mayavi.core.ui.api import SceneEditor, MlabSceneModel\n\nclass Model_Visualization(HasTraits):\n    \"The class that contains the dialog\"\n    frame = Range(0, 300, 0)\n    scene = Instance(MlabSceneModel, ())\n    plotEdges = []\n\n    def __init__(self , model ):\n        HasTraits.__init__(self)\n\n        ## Save model to object\n        self.model = model\n\n        ## Set value range\n        ## self.frame = Range(0, self.model.numberOfFrames - 1 , 0)\n\n        ## Set to initial frame\n        self.model.setFrame( 0 )\n\n        ## Get every joint coordinates in the frame\n        x = np.array( [ self.model.model_position[ key ][ 0 , 0 ] for key in self.model.model_position ] ) \n        y = np.array( [ self.model.model_position[ key ][ 1 , 0 ] for key in self.model.model_position ] )\n        z = np.array( [ self.model.model_position[ key ][ 2 , 0 ] for key in self.model.model_position ] )\n\n        ## Plot Edges\n        ##for edge in self.model.model_edges:\n        ##    self.plotEdges.append( self.scene.mlab.plot3d( edge[ : , 0 ] , edge[ : , 2 ] , edge[ : , 1 ]  , color=(0 , 0 ,0) ) )\n\n        ## Plot floor\n        s = np.array( 100 * [ 100 * [0] ] )\n        self.scene.mlab.surf( s , representation = 'wireframe' )        \n\n        # Populating our plot\n        self.plotJoints = self.scene.mlab.points3d(x, z, y, color=(0 , 0 ,0), scale_factor=.75 )\n\n    @on_trait_change('frame')\n    def update_plot( self ):\n\n\n        ## Set to initial frame\n        self.model.setFrame( self.frame )\n\n        ## Get every joint coordinates in the frame\n        x = np.array( [ self.model.model_position[ key ][ 0 , 0 ] for key in self.model.model_position ] ) \n        y = np.array( [ self.model.model_position[ key ][ 1 , 0 ] for key in self.model.model_position ] )\n        z = np.array( [ self.model.model_position[ key ][ 2 , 0 ] for key in self.model.model_position ] )\n        \n        ## Set surce to new joint positions\n        self.plotJoints.mlab_source.set( x = x, y = z, z = y )\n\n        ## Set source to new edge posistion\n        ##for index , edge in enumerate( self.model.model_edges ):\n        ##    self.plotEdges[ index ].mlab_source.set( x = edge[ : , 0 ] , y = edge[ : , 2 ] , z = edge[ : , 1 ] )\n\n    # Describe the dialog\n    view = View( Item('scene', height=300, show_label=False,\n                   editor=SceneEditor() ), HGroup('frame'), resizable=True )\n\ndef plotModel( model ):\n    \"\"\" Animates the model \"\"\"\n    Model_Visualization( model ).configure_traits()\n\ndef plotFrame( model , frameNumber ):\n    \"\"\" Plots a frame of the model \"\"\"\n\n    ## Set frame\n    model.setFrame( frameNumber )\n\n    ## Get every joint coordinates in the frame\n    x = np.array( [ model.model_position[ key ][ 0 , 0 ] for key in model.model_position ] ) \n    y = np.array( [ model.model_position[ key ][ 1 , 0 ] for key in model.model_position ] )\n    z = np.array( [ model.model_position[ key ][ 2 , 0 ] for key in model.model_position ] )\n\n    mlab.points3d( x , y , z , color=(0 , 0 ,0), scale_factor=.5 )\n\n    \n\n\n ",
			"file": "visualization.py",
			"file_size": 3284,
			"file_write_time": 1438847535000000,
			"settings":
			{
				"buffer_size": 3290,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "### Sesión\n\n########### Cubic spline interpolation\n\nimport model as m\nmodelo =  m.Model( \"../sample-mocap-data//05//05_01_ignoreFirstFrame.bvh\" )\nmodelo.read()\n\nimport movement as mov\ndata = mov.getJointPosition( modelo , \"LeftFoot\" ) \nsignal = [ position[ 1 , 0 ] for position in data ]\n\nimport data as dt\nf = dt.cubicInterpolation( signal )\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\naxis = range( 0 , len( signal ) )\n\nx = np.linspace( 0 , len( signal ) - 1 , 10000 )\ny = f( x )\n\nplt.plot( axis, signal, 'ro', x , y , 'g-' )\nplt.show()\n\n########### Plot speed and acceleration\n\nimport model as m\nmodelo =  m.Model( \"sample-mocap-data//05//05_01_ignoreFirstFrame.bvh\" )\nmodelo.read()\n\nimport movement as mov\n\nspeed = mov.getJointSpeed( modelo , \"LeftFoot\" )\nacceleration = mov.getJointAcceleration( modelo , \"LeftFoot\" )\n\nimport matplotlib.pyplot as plt\naxSpeed = range( len( speed ) )\naxAcceleration = range( len( acceleration ) )\n\nplt.plot( axSpeed , speed , 'g-')\nplt.show()\nplt.plot( axAcceleration, acceleration , \"r-\" )\nplt.show()\n\n########### Get stride length \n\nimport model as m\nmodelo =  m.Model( \"sample-mocap-data//05//05_01_ignoreFirstFrame.bvh\" )\nmodelo.read()\n\nimport bipedal as bip\nbip.strideLength( modelo , \"LeftFoot\" ,  \"LeftToeBase\" , \"LeftToeBase_EndSite\" )\n\nimport movement as mov\nmov.jointLowestFrames( modelo , \"LeftFoot\" , 1.1 )\n\nmov.plotJointPositionCoordinate( modelo , [ \"LeftFoot\" , \"LeftToeBase\" , \"LeftToeBase_EndSite\" ] , 1 ) \n\n\n########### Get period of discrete data\n\nimport model as m\nmodelo =  m.Model( \"../sample-mocap-data//05//05_01_ignoreFirstFrame.bvh\" )\nmodelo.read()\n\nimport movement as mov\ndata = mov.getJointPosition( modelo , \"LeftFoot\" ) \nsignal = [ position[ 1 , 0 ] for position in data ]\n\n\nimport data as dt\ndt.getPeriod( signal , modelo.frameTime )\n\n########### Plot Local workspace and fit a surface\n\nimport model as m\nmodelo =  m.Model( \"sample-mocap-data//05//05_01_ignoreFirstFrame.bvh\" )\nmodelo.read()\n\nimport movement as mov\nimport numpy as np\nimport pdb\nimport data as dt\n\ndata = mov.getJointLocalWorkspace( modelo , \"LeftFoot\" )\ndata = np.array( data )\n\ndt.quadraticSurfaceFit( data )\n\n## Forearm\n\ndata = mov.getJointLocalWorkspace( modelo , \"LeftForeArm\" )\ndata = np.array( data )\n\ndt.quadraticSurfaceFit( data )\n\n#########################\nfrom mayavi import mlab\nimport numpy as np\nimport model as m\n\nmodelo =  m.Model( \"../sample-mocap-data//05//05_01.bvh\" )\nmodelo.read()\n\n## Set frame\nmodelo.setFrame( 0 )\n\n## Get every joint coordinates in the frame\nx = np.array( [ modelo.model_position[ key ][ 0 , 0 ] for key in modelo.model_position ] ) \ny = np.array( [ modelo.model_position[ key ][ 1 , 0 ] for key in modelo.model_position ] )\nz = np.array( [ modelo.model_position[ key ][ 2 , 0 ] for key in modelo.model_position ] )\n\ns = mlab.points3d( x , y , z , color=(0 , 0 ,0), scale_factor=.5 )\n\n###############################\nimport visualization as vis\nimport numpy as np\nimport model as m\n\nmodelo =  m.Model( \"../sample-mocap-data//02//02_01.bvh\" )\nmodelo.read()\n\nvis.plotModel( modelo )\n\n\n###############################\nimport numpy as np\nimport mayavi.mlab as mlab\n\ny = np.array( 100*[ 100 * [0] ] )\nx , z = np.mgrid[ -50 : 50 , -50 : 50 ]\n\nmlab.points3d( x.flatten() , y.flatten() , z.flatten() )\n\n\n### Measure set frame\nimport model as m\nmodelo =  m.Model( \"../sample-mocap-data//02//02_01.bvh\" )\nmodelo.read()\n\nimport timeit \ntimeit.timeit( \"modelo.setFrame( 1 )\" ,  setup = \" import model as m modelo =  m.Model( \"../sample-mocap-data//02//02_01.bvh\" ) modelo.read() \" )",
			"file": "/home/francisco/Documents/Programming/Mocap-Data-Utilities/misc/session_1.py",
			"file_size": 3552,
			"file_write_time": 1447049988000000,
			"settings":
			{
				"buffer_size": 3554,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/francisco/Documents/Programming/Mocap-Data-Utilities/misc/fft_Test.py",
			"settings":
			{
				"buffer_size": 877,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\"\"\" Este modulo consistira de funciones referentes al movimiento \n    de un modelo jerarquico en 3D ( marioneta ) y su estudio \"\"\"\n\nimport model\nimport math\nimport matplotlib.pyplot as plt\nimport itertools\nimport numpy as np\n\n### 3D plot \nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef getJointPosition( model , joint_name ):\n    \"\"\" Calculates the position of the given joint in every frame.\"\"\"\n    jointPosition = []\n\n    ### Calculate every frame\n    for frame_index in range( model.numberOfFrames ):\n        model.setFrame( frame_index )\n        jointPosition.append( model.model_position[ joint_name ] )\n\n    return jointPosition\n\ndef getJointAngle( model , joint_name ):\n    \"\"\" Returns a list with the rotation in euler angles of the given joint. \"\"\"\n    jointAngle = []\n\n    ### Calculate every frame\n    for frame_index in range( model.numberOfFrames ):\n        model.setFrame( frame_index )\n        jointAngle.append( model.model_eulerAngles[ joint_name ] )\n\n    return jointAngle\ndef getJointSpeed( model , joint_name ):\n        \"\"\" Calculates the average speed of the joint between each succesive frames. \"\"\"\n        jointSpeed = []\n\n        ### Initialize model to the position in the first frame\n        model.setFrame( 0 )  \n        current_position = model.model_position[ joint_name ]  \n\n        ### Calculate average speed of succesive joint positions\n        for frame_index in range( 1 , model.numberOfFrames ):\n            model.setFrame( frame_index )\n            previous_position = current_position\n            current_position = model.model_position[ joint_name ]\n            \n            jointSpeed.append( np.linalg.norm( current_position - previous_position ) / model.frameTime )\n\n        return jointSpeed\n\ndef getJointAcceleration( model , joint_name ):\n    \"\"\" Calculates the acceleration of the joint between each succesive frames. \"\"\"\n    jointAcceleration = []\n\n    jointSpeed = getJointSpeed( model , joint_name )\n\n    ### Calculate average accelearation from succesive joint speed\n    for index in range( 1 , len( jointSpeed ) ):\n\n        jointAcceleration.append( ( jointSpeed[ index ] - jointSpeed[ index - 1 ] ) / model.frameTime  )\n\n    return jointAcceleration\n\ndef plotJointPositionCoordinate( model , joint_name , coordinate ):\n    \n    \"\"\" Plot the given coordinate of the joint as a function of the frames\"\"\"\n\n    ### Check if argument joint_name is a string , convert to string\n    if( type(joint_name) is str ):\n        joint_name = [ joint_name ]\n\n    ### Set color cycle for the plots\n    colors = itertools.cycle(['r', 'g', 'b', 'y'])\n\n    for joint in joint_name:\n\n        ### Get corrdinates of a joint\n        jointPositionList = getJointPosition( model , joint )\n\n        ### Generate coordinate value array\n        plotCoordinate = [ position[ coordinate,0 ] for position in jointPositionList ]\n        axis = [ x for x in range( 0 , model.numberOfFrames ) ]\n\n        ### Plot the given coordinate\n        plt.plot( axis , plotCoordinate , 'ro' , color = next(colors) )\n    \n    ### Show plot\n    plt.show()\n\ndef plotJointAngleCoordinate( model , joint_name , coordinate ):\n    \n    \"\"\" Plot the given coordinate of the joint as a function of the frames\"\"\"\n\n    ### Check if argument joint_name is a string , convert to string\n    if( type(joint_name) is str ):\n        joint_name = [ joint_name ]\n\n    ### Set color cycle for the plots\n    colors = itertools.cycle(['r', 'g', 'b', 'y'])\n\n    for joint in joint_name:\n\n        ### Get corrdinates of a joint\n        jointAngleList = getJointAngle( model , joint )\n\n        ### Generate coordinate value array\n        plotCoordinate = [ angle[ coordinate ] for angle in jointAngleList ]\n        axis = [ x for x in range( 0 , model.numberOfFrames ) ]\n\n        ### Plot the given coordinate\n        plt.plot( axis , plotCoordinate , 'ro' , color = next(colors) )\n    \n    ### Show plot\n    plt.show()\n\ndef jointLowestFrames( model , joint_name , error ):\n    \"\"\" Find the frames where the given joint is in its lowest position. Given that the Y axis \n        is the vertical axis \"\"\"\n    joint_position = getJointPosition( model , joint_name )\n\n    joint_height = [ coordinate[ 1,0 ] for coordinate in joint_position ]\n\n    min_height = min( joint_height )\n\n    frames = []\n\n    for index in range( 0 , len( joint_height ) ):\n\n        if( abs( joint_height[ index ] - min_height ) < error ):\n\n            frames.append( index )\n\n    return frames\n\ndef getJointLocalWorkspace( model , joint_name ):\n    \"\"\" Returns the observed positions of the joint in the local workspace. \"\"\"\n    \n    ### Get joint node\n    joint = model.getJointByName( joint_name )\n\n    ### Local workspace positions\n    jointLocalWorkspace = []\n\n    ### Calculate every frame\n    for frame_index in range( model.numberOfFrames ):\n        model.setFrame( frame_index )\n        \n        local_position = np.matrix( joint.transformation ) * np.matrix( [ [0] ,[0] ,[0] ,[1] ] )\n\n        jointLocalWorkspace.append( [ local_position[0,0] , local_position[1,0] , local_position[2,0] ] )\n\n    return jointLocalWorkspace\n\n\ndef plotJointLocalWorkspace( model , joint_name ):\n    \"\"\" 3D plot of the angles of a joint in the unit sphere \"\"\"\n\n    jointLocalWorkspace = getJointLocalWorkspace( model , joint_name )\n    \n    x = [ element[ 0 ] for element in jointLocalWorkspace ]\n    y = [ element[ 1 ] for element in jointLocalWorkspace ]\n    z = [ element[ 2 ] for element in jointLocalWorkspace ]\n\n    ### 3D plot the positions\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n\n    ax.scatter(x, y, z, c='r', marker='o')\n\n    ax.set_xlabel('X Label')\n    ax.set_ylabel('Y Label')\n    ax.set_zlabel('Z Label')\n\n    plt.show()\n\n\n",
			"file": "movement.py",
			"file_size": 7029,
			"file_write_time": 1437986805000000,
			"settings":
			{
				"buffer_size": 5711,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"command_palette":
	{
		"height": 219.0,
		"selected_items":
		[
			[
				"Package Control: re",
				"Package Control: Remove Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 501.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/francisco/Documents/Programming/Programación Eficiente/Tarea 2/Pirates/pirates.cpp",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/misc/test.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/sample-mocap-data/02/02_01_ignoreFirstFrame.bvh",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/bvhplay/bvhplay.py",
		"/home/francisco/Documents/Programming/ProyectoCompu/JuceLibraryCode/modules/juce_events/juce_events.cpp",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/sample-mocap-data/02/02_01.bvh",
		"/home/francisco/Documents/Textos/She Doesn't Love You",
		"/home/francisco/Documents/Textos/Don't forget",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/src/mlab_interactive_dialog.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/bipedal.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/Python3/bipedal.py",
		"/home/francisco/Documents/Programming/Python3/model.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/Python3/model.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/data.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/visualization.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/movement.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/misc/session_1.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/model.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/bvhplay/skeleton.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/bvhplay/camera.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/bvhplay/transport.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/bvhplay/geo.py",
		"/home/francisco/Documents/Programming/BVwHacker/bvwhacker_base.py",
		"/home/francisco/Documents/Programming/BVwHacker/bvwhacker.py",
		"/home/francisco/Documents/Programming/BVwHacker/README.md",
		"/usr/lib/python3.4/site-packages/vispy/plot/__init__.py",
		"/usr/lib/python3.4/site-packages/vispy/plot/fig.py",
		"/home/francisco/Downloads/curve_fitting.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/geometry.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/bvh.py",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/sample-mocap-data/Example1.bvh",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/sample-mocap-data/49/49_01_ignoreFirstFrame.bvh",
		"/home/francisco/Documents/Programming/Mocap-Data-Utilities/sample-mocap-data/05/05_01__ignoreFirstFrame.bvh",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/sample-mocap-data/02/02_01.bvh",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/asfamc.py",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/bvh.py",
		"/C/Users/Test/Downloads/bvhplay-1.00-sourcecode/bvhplay.py",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/bvhplay/__init__.py",
		"/C/Users/Test/Downloads/bvhplay-1.00-sourcecode/README",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/test.py",
		"/C/Users/Test/AppData/Roaming/Sublime Text 3/Packages/Anaconda/README.md",
		"/C/Users/Test/Downloads/02.asf",
		"/C/Users/Test/Downloads/cgkit-2.0.0.win32-py3.3/PLATLIB/cgkit/bvh.py",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/sample-mocap-data/Example1.bvh",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/scatterPlot.py",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/sample-mocap-data/Male1_B3_Walk.bvh",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/data.py",
		"/C/Users/Test/Downloads/500 Days Of Summer.2009.720p.BDRip.x264-VLiS/geometry.h",
		"/C/Python33/Lib/site-packages/cgkit/bvh.py",
		"/C/Users/Test/Documents/Programming/Mocap Data Utilities/sample-mocap-data/Example1.bvh.txt",
		"/C/Users/Test/Downloads/cgkit-2.0.0-py3k/cgkit-2.0.0/README.txt"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"clear",
			"redraw",
			"translation",
			"trans",
			"meridiona",
			"mycanvas",
			"myviewport",
			"draw",
			"screenedge",
			"redraw()",
			"redraw",
			"mytransport",
			"sig",
			"channel",
			"x",
			"children",
			"calculateNodePosition",
			"end site",
			"calculateFrame",
			"self",
			"channel_position",
			"self.channels",
			"numch"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "bipedal.py",
					"settings":
					{
						"buffer_size": 2718,
						"regions":
						{
						},
						"selection":
						[
							[
								2715,
								2715
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "data.py",
					"settings":
					{
						"buffer_size": 2948,
						"regions":
						{
						},
						"selection":
						[
							[
								135,
								135
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "bvh.py",
					"settings":
					{
						"buffer_size": 9822,
						"regions":
						{
						},
						"selection":
						[
							[
								2448,
								2448
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 571.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "model.py",
					"settings":
					{
						"buffer_size": 6012,
						"regions":
						{
						},
						"selection":
						[
							[
								4918,
								4918
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 3.0,
						"translation.y": 128.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "visualization.py",
					"settings":
					{
						"buffer_size": 3290,
						"regions":
						{
						},
						"selection":
						[
							[
								1159,
								1159
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 506.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/francisco/Documents/Programming/Mocap-Data-Utilities/misc/session_1.py",
					"settings":
					{
						"buffer_size": 3554,
						"regions":
						{
						},
						"selection":
						[
							[
								1769,
								1769
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 687.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/francisco/Documents/Programming/Mocap-Data-Utilities/misc/fft_Test.py",
					"settings":
					{
						"buffer_size": 877,
						"regions":
						{
						},
						"selection":
						[
							[
								166,
								166
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 37.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "movement.py",
					"settings":
					{
						"buffer_size": 5711,
						"regions":
						{
						},
						"selection":
						[
							[
								632,
								632
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 201.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/C/Users/Test/Documents/Programming/Data Structures/data-structures.py"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 121.0,
	"status_bar_visible": true
}
